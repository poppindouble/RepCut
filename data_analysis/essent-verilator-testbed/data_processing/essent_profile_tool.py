#!/bin/env python3

import re
import statistics
import itertools

import pickle
import base64
import zlib

events = [
    'CYCLE_START',
    'EVAL_DONE',
    'SYNC_START',
    'SYNC_DONE',
    'CYCLE_DONE'
]

CYCLE_START = 0
EVAL_DONE = 1
SYNC_START = 2
SYNC_DONE = 3
CYCLE_DONE = 4

numEvents = len(events)


CPU_TICK_RATE = 2394620000

def parseReport(filename):
    dat = {}

    with open(filename) as f:
        for _lineno, line in enumerate(f):
            lineno = _lineno + 1

            if line[:3].find('//') >= 0:
                continue
            split = line.split(':')

            if len(split) != 2:
                print(lineno)
                print(line)
                print("Error: Unknow format")
                exit(-1)

            key = split[0]
            value = split[1]

            if key == "Duration(ms)":
                dat['Duration'] = int(value.strip())
            elif key == "Cycles":
                dat['Cycles'] = int(value.strip())
            elif key == "Profile cycles":
                dat['Profile Cycles'] = int(value.strip())
            elif key == "Threads":
                dat['nThreads'] = int(value.strip())
            elif key.find("Thread") >= 0:
                thread_id = int(re.findall("\d+", key)[0])
                counter_values = map(lambda x: int(x) if x != '' else -1, value.strip().split(','))
                cycle_cnt = 0
                cycle_sample = []

                while True:
                    data_line = tuple(itertools.islice(counter_values, 0, numEvents))

                    if len(data_line) != numEvents:
                        break

                    cycle_sample.append(data_line)
                    cycle_cnt += 1

                dat[thread_id] = cycle_sample

            else:
                print("Error: Unknow key: " + key)

    return dat



def brief(dat):
    print("Duration (ms): %s" % (dat['Duration']))
    print("Simulation Cycles: %s" % (dat['Cycles']))
    print("Recorded Cycles: %s" % (dat['Profile Cycles']))
    print('# of Threads: %s' % (dat['nThreads']))

    for tid in range(0, dat['nThreads']):
        eval_duration = []
        cycle_duration = []

        for tup in dat[tid]:
            eval_ticks = tup[EVAL_DONE] - tup[CYCLE_START]
            cycle_ticks = tup[CYCLE_DONE] - tup[CYCLE_START]

            eval_duration.append(eval_ticks)
            cycle_duration.append(cycle_ticks)

        eval_mean = int(statistics.mean(eval_duration))
        eval_stddev = statistics.pstdev(eval_duration)
        eval_time = eval_mean * 1000 * 1000 / CPU_TICK_RATE

        cycle_mean = int(statistics.mean(cycle_duration))
        cycle_stddev = statistics.pstdev(cycle_duration)
        cycle_time = cycle_mean * 1000 * 1000 / CPU_TICK_RATE

        print("Thread %s spend %s ticks (%0.2f us) on eval stage, in average. Stddev = %0.3f" % (tid, eval_mean, eval_time, eval_stddev))
        print("Thread %s spend %s ticks (%0.2f us) on each cycle, in average. Stddev = %0.3f" % (tid, cycle_mean, cycle_time, cycle_stddev))


def serialize_pickle_z(dat, filename):
    with open(filename, 'wb') as f:
        byte_string = pickle.dumps(dat)
        compressed = zlib.compress(byte_string)
        # f.write(b64_enc.decode('utf8'))
        f.write(compressed)

def deserialize_pickle_z(filename):
    with open(filename, 'rb') as f:
        compressed = f.read()
        byte_string = zlib.decompress(compressed)
        obj = pickle.loads(byte_string)

        return obj


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(
        allow_abbrev=False,
        description="""Parse and report profile data generated by ESSENT simulator""")

    parser.add_argument('filename',
                        help='input profile_exec.dat filename to process',
                        default='profile_exec.dat')

    parser.add_argument('--tick-rate', help = 'RDTSC Ticks per second', type = int, required = False, default = CPU_TICK_RATE)


    Args = parser.parse_args()

    CPU_TICK_RATE = int(Args.tick_rate)

    dat = parseReport(Args.filename)

    brief(dat)

    serialize_pickle_z(dat, "profile_exec.pickle.z")
